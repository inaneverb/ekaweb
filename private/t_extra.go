package ekaweb_private

import (
	"net/http"
)

type Handler = http.Handler

type HandlerExtended interface {
	Handler
	CheckErrorBefore() bool
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type Middleware interface {
	Callback(next Handler) Handler
}

type MiddlewareExtended interface {
	Middleware
	CheckErrorBefore() bool
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type HandlerFunc = http.HandlerFunc

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type HandlerFuncNoErrorCheck func(w http.ResponseWriter, r *http.Request)

func (f HandlerFuncNoErrorCheck) CheckErrorBefore() bool {
	return false
}

func (f HandlerFuncNoErrorCheck) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	f(w, r)
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type MiddlewareFunc func(next Handler) Handler

func (f MiddlewareFunc) Callback(next Handler) Handler {
	return f(next)
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type MiddlewareFuncNoErrorCheck func(next Handler) Handler

func (f MiddlewareFuncNoErrorCheck) CheckErrorBefore() bool {
	return false
}

func (f MiddlewareFuncNoErrorCheck) Callback(next Handler) Handler {
	return f(next)
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type ErrorHandler = func(ctx any, err error)
type ErrorHandlerHTTP = func(w http.ResponseWriter, r *http.Request, err error)
